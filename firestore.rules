rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function hasCustomTestFeature() {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        (
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
          (
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.planId != null &&
            get(/databases/$(database)/documents/plans/$(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.planId)).data.hasCustomTest == true
          )
        );
    }

    function isTestOwner(testId) {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/tests/$(testId)) &&
        get(/databases/$(database)/documents/tests/$(testId)).data.createdBy == request.auth.uid;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // User rules
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isAuthenticated();
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    // Plans rules
    match /plans/{planId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Discount codes rules
    match /discountCodes/{codeId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Purchases rules
    match /purchases/{purchaseId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }

    // Questions rules
    match /questions/{questionId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // Test blocks rules
    match /testBlocks/{blockId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Tests rules
    match /tests/{testId} {
      allow read: if isAuthenticated() && (
        resource.data.isPublic == true || 
        (resource.data.isTemporary == true && resource.data.createdBy == request.auth.uid)
      );
      
      allow create: if isAuthenticated() && (
        request.resource.data.isTemporary == true && 
        request.resource.data.createdBy == request.auth.uid
      );
      
      allow update: if isAuthenticated() && 
        resource.data.isTemporary == true && 
        resource.data.createdBy == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
        resource.data.isTemporary == true && 
        resource.data.createdBy == request.auth.uid;
    }

    // Temporary tests rules
    match /temporaryTests/{testId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // Test results rules
    match /testResults/{resultId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // Test sessions rules
    match /testSessions/{sessionId} {
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow delete: if false;
    }

    // Baremo rules
    match /baremo/{blockId} {
      allow read, write: if isAuthenticated();
    }

    // Other collections...
    match /{document=**} {
      allow read, write: if isAdmin();
    }
  }
}
